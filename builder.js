import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import handlebars from 'handlebars';
import minify from '@node-minify/core';
import cleanCSS from '@node-minify/clean-css';
import htmlMinifier from '@node-minify/html-minifier';
import showdown from 'showdown';

const converter = new showdown.Converter({
  metadata: true,
  ghCompatibleHeaderId: true,
  requireSpaceBeforeHeadingText: true,
  emoji: true,
});

const minifyOptions = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: true,
  decodeEntities: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  preventAttributesEscaping: true,
  processConditionalComments: true,
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: true,
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: true,
  keepClosingSlash: true,
};

const compileTemplate = (template, data) => handlebars.compile(template)(data);
const getPath = (...paths) => path.resolve(path.dirname(fileURLToPath(import.meta.url)), ...paths);
const findFile = (data, pattern) => data.find((file) => file.includes(pattern));
const findFiles = (data, pattern) => data.filter((file) => file.includes(pattern));
const getFile = (file) => fs.readFileSync(file, 'utf8');
const getFiles = (source) =>
  fs.readdirSync(source).flatMap((fileName) => {
    const fileFullPath = path.join(source, fileName);
    return fs.statSync(fileFullPath).isDirectory() ? getFiles(fileFullPath) : fileFullPath;
  });

const sourceDirPath = getPath('src');
const sourcePostDirPath = getPath('src', 'posts');
const buildDirPath = getPath('build');
const buildPostDirPath = getPath('build', 'posts');
const sourceDirFiles = getFiles(sourceDirPath);

const minifyStyle = () => {
  const styleFile = findFile(sourceDirFiles, '.css');
  const [, styleFileName] = styleFile.split(path.join('src', path.sep));

  minify({
    compressor: cleanCSS,
    input: styleFile,
    output: getPath('build', styleFileName),
    options: minifyOptions,
  });
};

const minifyContent = async (data, type = 'list') => {
  const stylePath = type !== 'list' ? `..${path.sep}` : '';
  const title = `Blog${type !== 'list' ? ` | ${data.title}` : ''}`;
  const total = Array.isArray(data?.post) ? data.post.length : 1;

  const sectionTemplateFile = findFile(sourceDirFiles, `-${type}.hbs`);
  const indexTemplateFile = findFile(sourceDirFiles, 'index.hbs');
  const sectionHtml = compileTemplate(getFile(sectionTemplateFile), data);

  const indexData = { section: sectionHtml, path: stylePath, title, total };
  const indexHtml = compileTemplate(getFile(indexTemplateFile), indexData);

  const result = await minify({
    compressor: htmlMinifier,
    content: indexHtml,
    options: minifyOptions,
  });

  const paths = type === 'list' ? 'index.html' : data.slug;
  fs.writeFileSync(getPath('build', paths), result);
};

const minifyPosts = () => {
  const postsData = getFiles(sourcePostDirPath).map((file) => {
    const content = converter.makeHtml(getFile(file));
    const { title, date } = converter.getMetadata();
    const tag = date
      .split('/')
      .map((item) => item.padStart(2, '0'))
      .join('');
    const slug = file.replace(/^.*[\/\\]posts[\/\\](.*).md$/, `posts${path.sep}$1.html`);

    minifyContent({ slug, title, tag, content }, 'main');

    const [day, month, year] = date.split('/');
    const formattedDate = new Date(year, month - 1, day).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: '2-digit',
    });

    return { slug, title, tag, date: formattedDate };
  });

  const sortedPostsData = [...postsData].sort((oldPost, newPost) => new Date(newPost.date) - new Date(oldPost.date));
  minifyContent({ post: sortedPostsData });
};

const minifyPage = () => {
  findFiles(sourceDirFiles, '.html').map(async (file) => {
    const [, pageFileName] = file.split(path.join('src', path.sep));
    const result = await minify({
      compressor: htmlMinifier,
      content: getFile(file),
      options: minifyOptions,
    });

    fs.writeFileSync(getPath('build', pageFileName), result);
  });
};

const cleanBuildDir = () => {
  fs.rmSync(buildDirPath, { recursive: true, force: true });
  [buildDirPath, buildPostDirPath].forEach((dir) => fs.mkdirSync(dir, { recursive: true }));
};

cleanBuildDir();
minifyStyle();
minifyPosts();
minifyPage();
