const fs = require('fs');
const path = require('path');
const handlebars = require('handlebars');
const minify = require('@node-minify/core');
const cleanCSS = require('@node-minify/clean-css');
const htmlMinifier = require('@node-minify/html-minifier');
const showdown = require('showdown');
const converter = new showdown.Converter({ metadata: true, ghCompatibleHeaderId: true, requireSpaceBeforeHeadingText: true, emoji: true });

const minifyOptions = {
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: true,
  decodeEntities: true,
  includeAutoGeneratedTags: false,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  preventAttributesEscaping: true,
  processConditionalComments: true,
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: true,
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: true,
  keepClosingSlash: true,
};

const separator = path[process.platform === `win32` ? `win32` : `posix`].sep;

const compileTemplate = (template, data) => handlebars.compile(template)(data);
const getPath = (source = 'build', paths = []) => path.join(__dirname, ...[source, ...paths]);
const findFile = (data, pattern) => data.find((file) => file.split(pattern).length > 1);
const isFile = (filePath) => fs.lstatSync(filePath).isFile();
const getFile = (file) => fs.readFileSync(file, 'utf8');
const getFiles = (source, data = []) =>
  fs
    .readdirSync(source)
    .map((fileName) => {
      const fileFullPath = path.join(source, fileName);
      return isFile(fileFullPath) ? fileFullPath : getFiles(fileFullPath, data);
    })
    .flat(2);

const sourceDirPath = getPath('src');
const sourcePostDirPath = getPath('src', ['posts']);
const buildDirPath = getPath('build');
const buildPostDirPath = getPath('build', ['posts']);

const sourceDirFiles = getFiles(sourceDirPath);

const minifyCSS = () => {
  const styleFile = findFile(sourceDirFiles, '.css');
  const styleFileName = styleFile.split('src' + separator)[1];
  const paths = [styleFileName];
  minify({
    compressor: cleanCSS,
    input: styleFile,
    output: getPath('build', paths),
    options: minifyOptions,
  });
};

const minifyContent = (data, type = 'list') => {
  const stylePath = type !== 'list' ? '..' + separator : '';
  const title = type === 'list' ? 'Blog' : 'Blog | ' + data.title;

  const sectionTemplateFile = findFile(sourceDirFiles, `-${type}.hbs`);
  const indexTemplateFile = findFile(sourceDirFiles, 'index.hbs');

  const sectionHtml = compileTemplate(getFile(sectionTemplateFile), data);

  const indexData = { section: sectionHtml, path: stylePath, title };
  const indexHtml = compileTemplate(getFile(indexTemplateFile), indexData);

  minify({
    compressor: htmlMinifier,
    content: indexHtml,
    options: minifyOptions,
  }).then((result) => {
    const paths = [type === 'list' ? 'index.html' : data.slug];
    fs.writeFile(getPath('build', paths), result, (error) => {
      if (error) console.log(error);
    });
  });
};

const cleanBuildDir = () => {
  if (!fs.existsSync(buildDirPath)) fs.mkdirSync(buildDirPath);
  fs.readdirSync(buildDirPath).forEach((file) => fs.rmSync(`${buildDirPath}${separator}${file}`, { recursive: true }));
  if (!fs.existsSync(buildPostDirPath)) fs.mkdirSync(buildPostDirPath);
};

const minifyPosts = () => {
  cleanBuildDir();
  minifyCSS();

  const postsData = getFiles(sourcePostDirPath)
    .map((file) => {
      const content = converter.makeHtml(getFile(file));
      const { title, date } = converter.getMetadata();

      const tag = date
        .split('/')
        .map((item) => item.padStart(2, '0'))
        .join('');
      const slug = 'posts' + separator + file.split('posts' + separator)[1].split('.md')[0] + '.html';

      minifyContent({ slug, title, tag, content }, 'main');

      const dateHelper = date.split('/');
      return {
        slug,
        title,
        tag,
        date: new Date(dateHelper[2], dateHelper[1] - 1, dateHelper[0]).toLocaleDateString('EN-US', {
          year: 'numeric',
          month: 'short',
          day: '2-digit',
        }),
      };
    })
    .slice()
    .sort((oldPost, newPost) => new Date(newPost.date) - new Date(oldPost.date));

  minifyContent({ post: postsData });
};

minifyPosts();
